//
// Generated file, do not edit! Created by nedtool 4.6 from Network.msg.
//

#ifndef _NETWORK_M_H_
#define _NETWORK_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Network.msg:5</tt> by nedtool.
 * <pre>
 * //
 * // Represents a packet in the network. Network layer packet
 * //
 * packet Network
 * {
 *     unsigned short srcAddr;
 *     unsigned short dstAddr;
 *     unsigned int hopCount;
 *     unsigned int hopLimit;
 *     unsigned short protocol;
 * }
 * </pre>
 */
class Network : public ::cPacket
{
  protected:
    unsigned short srcAddr_var;
    unsigned short dstAddr_var;
    unsigned int hopCount_var;
    unsigned int hopLimit_var;
    unsigned short protocol_var;

  private:
    void copy(const Network& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Network&);

  public:
    Network(const char *name=NULL, int kind=0);
    Network(const Network& other);
    virtual ~Network();
    Network& operator=(const Network& other);
    virtual Network *dup() const {return new Network(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getSrcAddr() const;
    virtual void setSrcAddr(unsigned short srcAddr);
    virtual unsigned short getDstAddr() const;
    virtual void setDstAddr(unsigned short dstAddr);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getHopLimit() const;
    virtual void setHopLimit(unsigned int hopLimit);
    virtual unsigned short getProtocol() const;
    virtual void setProtocol(unsigned short protocol);
};

inline void doPacking(cCommBuffer *b, Network& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Network& obj) {obj.parsimUnpack(b);}


#endif // ifndef _NETWORK_M_H_

